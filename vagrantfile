# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/focal64"

  # Timeout süresini artırıyoruz
  config.vm.boot_timeout = 1800  # 30 dakikaya çıkarıyoruz (gerekirse artırabilirsiniz)

  # VirtualBox sağlayıcısını kullanın
  config.vm.provider "virtualbox" do |vb|
    vb.memory = 4096  # RAM'i 4 GB olarak ayarlayın
    vb.cpus = 2       # CPU sayısını 2 olarak ayarlayın
  end

  # Ağ yapılandırmaları
  config.vm.network "forwarded_port", guest: 5000, host: 5000  # .NET Core için
  config.vm.network "forwarded_port", guest: 63934, host: 63934  # AdminUI için
  config.vm.network "forwarded_port", guest: 4200, host: 4200  # NormalUI için
  config.vm.network "forwarded_port", guest: 5104, host: 5104  # VirusProofJotti için
  config.vm.network "forwarded_port", guest: 7777, host: 7777  # Python için
  config.vm.network "forwarded_port", guest: 9999, host: 9999  # GoTTY için

  # Provisioning script
  config.vm.provision "shell", inline: <<-SHELL
    set -e

    # Güncellemeler ve temel paketler
    echo "[** Updating package lists]"
    sudo apt-get update -y && echo "[Updated]"
    sudo apt-get upgrade -y && echo "[Upgraded]"

    # Python ve diğer temel bağımlılıkların kurulumu
    echo "[** Installing essential packages]"
    sudo DEBIAN_FRONTEND=noninteractive apt-get install -y python3 python3-pip wget apt-transport-https software-properties-common curl unzip firefox libgtk-3-0 libdbus-glib-1-2 xvfb unixodbc unixodbc-dev tmux && echo "[Essential packages installed]"

    # Node.js ve Angular CLI kurulumu
    echo "[** Installing Node.js and Angular CLI]"
    sudo curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
    sudo DEBIAN_FRONTEND=noninteractive apt-get install -y nodejs && echo "[Node.js installed]"
    sudo npm cache clean --force && echo "[NPM Cache Cleaned]"
    sudo npm install -g @angular/cli@16.0.4 && echo "[Angular CLI installed]"
    
    # Ng komutunun yüklü olduğunu kontrol et
    if ! command -v ng &> /dev/null
    then
        echo "Ng komutu bulunamadı, tekrar yükleniyor..."
        sudo npm install -g @angular/cli@16.0.4 && echo "[Ng yeniden yüklendi]"
    fi

    # .NET SDK kurulumu
    echo "[** Installing .NET SDK]"
    wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
    sudo dpkg -i packages-microsoft-prod.deb
    sudo apt-get update -y
    sudo apt-get install -y dotnet-sdk-6.0 && echo "[.NET SDK installed]"

    # GeckoDriver kurulumu (Firefox için)
    echo "[** Installing GeckoDriver]"
    LATEST_GECKODRIVER=$(curl -s https://api.github.com/repos/mozilla/geckodriver/releases/latest | grep 'browser_download_url.*linux64.tar.gz' | cut -d : -f 2,3 | tr -d '"')
    wget $LATEST_GECKODRIVER -O geckodriver.tar.gz
    tar -xzf geckodriver.tar.gz --skip-old-files || echo "[GeckoDriver extraction skipped due to error]"
    sudo mv geckodriver /usr/local/bin/ || echo "[GeckoDriver move skipped due to error]"
    sudo chmod +x /usr/local/bin/geckodriver && echo "[GeckoDriver installed]"

    # MSSQL Tools kurulumu
    echo "[** Installing MSSQL tools]"
    curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
    curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
    sudo apt-get update -y
    sudo ACCEPT_EULA=Y apt-get install -y mssql-tools && echo "[MSSQL tools installed]"

    # PATH'e mssql-tools dizinini ekleyin
    echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
    source ~/.bashrc

    # GoTTY kurulumu
    echo "[** Installing GoTTY]"
    wget https://github.com/yudai/gotty/releases/download/v1.0.1/gotty_linux_amd64.tar.gz
    tar -xvf gotty_linux_amd64.tar.gz
    sudo mv gotty /usr/local/bin/
    sudo chmod +x /usr/local/bin/gotty && echo "[GoTTY installed]"

    # Her projeyi farklı bir tmux oturumunda çalıştırma
    sudo chown -R vagrant:vagrant /vagrant/VirusProofJotti

    # Oturumların başlatılması ve loglama
    echo "[** Starting sessions]"
    tmux new-session -d -s webapi "cd /vagrant/VirusProof/WebAPI && dotnet restore >> /vagrant/webapi.log 2>&1 && sleep 5 && dotnet build >> /vagrant/webapi.log 2>&1 || { echo 'Build hatası! Oturum kapanmayacak, hatayı inceleyin.'; read -n 1 -s -r -p 'Devam etmek için bir tuşa basın...'; } && sleep 5 && dotnet run --urls 'http://0.0.0.0:5000' >> /vagrant/webapi.log 2>&1"
    tmux new-session -d -s jotti "cd /vagrant/VirusProofJotti && dotnet restore >> /vagrant/jotti.log 2>&1 && sleep 5 && dotnet build >> /vagrant/jotti.log 2>&1 || { echo 'Build hatası! Oturum kapanmayacak, hatayı inceleyin.'; read -n 1 -s -r -p 'Devam etmek için bir tuşa basın...'; } && sudo -u vagrant xvfb-run -a dotnet run --urls 'http://0.0.0.0:5104' >> /vagrant/jotti.log 2>&1"
    tmux new-session -d -s adminui "cd /vagrant/VirusProofAdminUI && npm install --no-bin-links >> /vagrant/adminui.log 2>&1 || { echo 'Hata oluştu! Oturum kapanmayacak, hatayı inceleyin.'; read -n 1 -s -r -p 'Devam etmek için bir tuşa basın...'; } && exec ng serve --host 0.0.0.0 --poll=2000 >> /vagrant/adminui.log 2>&1"
    tmux new-session -d -s normalui "cd /vagrant/VirusProofUI && npm install --no-bin-links >> /vagrant/normalui.log 2>&1 || { echo 'Hata oluştu! Oturum kapanmayacak, hatayı inceleyin.'; read -n 1 -s -r -p 'Devam etmek için bir tuşa basın...'; } && exec ng serve --host 0.0.0.0 --poll=2000 >> /vagrant/normalui.log 2>&1"
    tmux new-session -d -s pythonapp "cd /vagrant/VirusProofPython && pip3 install -r requirements.txt >> /vagrant/pythonapp.log 2>&1 && python3 app.py >> /vagrant/pythonapp.log 2>&1"
    
    echo "[** All sessions started]"

    # GoTTY'yi başlatma
    echo "[** Starting GoTTY]"
    nohup gotty --port 9999 --address 0.0.0.0 --permit-write bash > /dev/null 2>&1 &
  SHELL

  # Vagrant halt'tan sonra log dosyalarını temizleme
  config.vm.provision "shell", inline: <<-SHELL, run: "always"
    if [ "$1" = "halt" ]; then
      echo "[** Cleaning up log files]"
      > /vagrant/adminui.log
      > /vagrant/normalui.log
      > /vagrant/webapi.log
      > /vagrant/jotti.log
      > /vagrant/pythonapp.log
      echo "[** Log files cleared]"
    fi
  SHELL
end